<?php

namespace App\Http\Controllers;

use DB;
use Log;
use Zipper;
use Storage;
use App\Document;
use Exception;
use App\Events\OrderShipped;

use App\Repositories\UserRepository;
use App\Repositories\FileRepository;
use Illuminate\Http\Request;


class PostApiController extends Controller
{
    protected $userRepository,$fileRepository;
    public function __construct(UserRepository $userRepository,FileRepository $fileRepository)
    {
        $this->fileRepository = $fileRepository;
        $this->userRepository = $userRepository;
    }
    public function UploadString(Request $request)
    {
         $string_example='http://18.182.233.134/api/show?string=test&page=1';
         return substr(strrchr($string_example, "?"), 1);

//        $array = array();
//        for($i = 0;$i<=100;$i++)
//        {
//            $array['data'][$i] = array(
//                'filename' => 'test'.($i+1).'.'.'txt'
//                );
//        }
//        return $array;

//        $content = $request->name;
//        realpath($content);
//        $a = fopen(iconv('UTF-8','GBK',realpath($content)), 'r+');
//        echo $a;
//        return 0;
//        $content = base64_encode(file_get_contents($request->file('name')->getRealPath()));

        $array = array();
        for($i = 0;$i<=100;$i++)
        {
            $array['data'][$i] = array(
                'filename' => 'test'.($i+1),
                'extension' => 'txt',
                'content' => 'MS4gQ3JlYXRlIHVzZXINCg0KY3VybCAtLXJlcHVlc3QgUE9TVCBcDQogIC0tdXJsIGh0dHA6Ly8xOC4xNzkuMTcwLjE2OC91c2VycycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJmdWxsX25hbWUiOiAiYWJieSIsDQogICAgImVtYWlsIjogImFiYnlAZW1haWwuY29tIiwNCiAgICAicGhvbmVfbnVtYmVyIjogIjA2NzQ1Njc1NDM0NTUiLA0KICAgICJjb21wYW55X25hbWUiOiAibG9uZ3NraSIsDQogICAgImNvdW50cnlfdHlwZSI6ICJiY2QiLA0KICAgICJsYW5ndWFnZV90eXBlIjogIkZSIiwNCiAgICAiYWN0b3JfdHlwZSI6IDMsDQogICAgImNyZWF0ZWRfYnkiOiAiQmV0dHkiDQogIH0NCn0nDQoNCjIuR2V0IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IFBPU1QgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL2Nvbm5lY3Rpb25zJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgInN5c3RlbSI6ICJFUlAiDQogIH0NCn0nDQoNCg0KMy4gR2V0IHVzZXJfaWQgYnkgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgR0VUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC91c2Vycy9pZCcgXA0KICAtLWhlYWRlciAndXNlci1hY2Nlc3MtdG9rZW46IDAyYTQ3NWU4NzYyZjVjMDBkOTI0M2M1OGRkMmQyZWVlNDcxZDY2MGVkYmY2OWY1NmQ5N2Q3NTY1YWU2MjUzNjInDQoNCg0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQoxMjM0NTY3DQoNCjEuIENyZWF0ZSB1c2VyDQoNCmN1cmwgLS1yZXB1ZXN0IFBPU1QgXA0KICAtLXVybCBodHRwOi8vMTguMTc5LjE3MC4xNjgvdXNlcnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAiZnVsbF9uYW1lIjogImFiYnkiLA0KICAgICJlbWFpbCI6ICJhYmJ5QGVtYWlsLmNvbSIsDQogICAgInBob25lX251bWJlciI6ICIwNjc0NTY3NTQzNDU1IiwNCiAgICAiY29tcGFueV9uYW1lIjogImxvbmdza2kiLA0KICAgICJjb3VudHJ5X3R5cGUiOiAiYmNkIiwNCiAgICAibGFuZ3VhZ2VfdHlwZSI6ICJGUiIsDQogICAgImFjdG9yX3R5cGUiOiAzLA0KICAgICJjcmVhdGVkX2J5IjogIkJldHR5Ig0KICB9DQp9Jw0KDQoyLkdldCB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBQT1NUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC9jb25uZWN0aW9ucycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJzeXN0ZW0iOiAiRVJQIg0KICB9DQp9Jw0KDQoNCjMuIEdldCB1c2VyX2lkIGJ5IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IEdFVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvdXNlcnMvaWQnIFwNCiAgLS1oZWFkZXIgJ3VzZXItYWNjZXNzLXRva2VuOiAwMmE0NzVlODc2MmY1YzAwZDkyNDNjNThkZDJkMmVlZTQ3MWQ2NjBlZGJmNjlmNTZkOTdkNzU2NWFlNjI1MzYyJw0KDQoNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KMTIzNDU2Nw0KDQoxLiBDcmVhdGUgdXNlcg0KDQpjdXJsIC0tcmVwdWVzdCBQT1NUIFwNCiAgLS11cmwgaHR0cDovLzE4LjE3OS4xNzAuMTY4L3VzZXJzJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgImZ1bGxfbmFtZSI6ICJhYmJ5IiwNCiAgICAiZW1haWwiOiAiYWJieUBlbWFpbC5jb20iLA0KICAgICJwaG9uZV9udW1iZXIiOiAiMDY3NDU2NzU0MzQ1NSIsDQogICAgImNvbXBhbnlfbmFtZSI6ICJsb25nc2tpIiwNCiAgICAiY291bnRyeV90eXBlIjogImJjZCIsDQogICAgImxhbmd1YWdlX3R5cGUiOiAiRlIiLA0KICAgICJhY3Rvcl90eXBlIjogMywNCiAgICAiY3JlYXRlZF9ieSI6ICJCZXR0eSINCiAgfQ0KfScNCg0KMi5HZXQgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgUE9TVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvY29ubmVjdGlvbnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAic3lzdGVtIjogIkVSUCINCiAgfQ0KfScNCg0KDQozLiBHZXQgdXNlcl9pZCBieSB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBHRVQgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL3VzZXJzL2lkJyBcDQogIC0taGVhZGVyICd1c2VyLWFjY2Vzcy10b2tlbjogMDJhNDc1ZTg3NjJmNWMwMGQ5MjQzYzU4ZGQyZDJlZWU0NzFkNjYwZWRiZjY5ZjU2ZDk3ZDc1NjVhZTYyNTM2MicNCg0KDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjEyMzQ1NjcNCg0KMS4gQ3JlYXRlIHVzZXINCg0KY3VybCAtLXJlcHVlc3QgUE9TVCBcDQogIC0tdXJsIGh0dHA6Ly8xOC4xNzkuMTcwLjE2OC91c2VycycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJmdWxsX25hbWUiOiAiYWJieSIsDQogICAgImVtYWlsIjogImFiYnlAZW1haWwuY29tIiwNCiAgICAicGhvbmVfbnVtYmVyIjogIjA2NzQ1Njc1NDM0NTUiLA0KICAgICJjb21wYW55X25hbWUiOiAibG9uZ3NraSIsDQogICAgImNvdW50cnlfdHlwZSI6ICJiY2QiLA0KICAgICJsYW5ndWFnZV90eXBlIjogIkZSIiwNCiAgICAiYWN0b3JfdHlwZSI6IDMsDQogICAgImNyZWF0ZWRfYnkiOiAiQmV0dHkiDQogIH0NCn0nDQoNCjIuR2V0IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IFBPU1QgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL2Nvbm5lY3Rpb25zJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgInN5c3RlbSI6ICJFUlAiDQogIH0NCn0nDQoNCg0KMy4gR2V0IHVzZXJfaWQgYnkgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgR0VUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC91c2Vycy9pZCcgXA0KICAtLWhlYWRlciAndXNlci1hY2Nlc3MtdG9rZW46IDAyYTQ3NWU4NzYyZjVjMDBkOTI0M2M1OGRkMmQyZWVlNDcxZDY2MGVkYmY2OWY1NmQ5N2Q3NTY1YWU2MjUzNjInDQoNCg0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQoxMjM0NTY3DQoNCjEuIENyZWF0ZSB1c2VyDQoNCmN1cmwgLS1yZXB1ZXN0IFBPU1QgXA0KICAtLXVybCBodHRwOi8vMTguMTc5LjE3MC4xNjgvdXNlcnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAiZnVsbF9uYW1lIjogImFiYnkiLA0KICAgICJlbWFpbCI6ICJhYmJ5QGVtYWlsLmNvbSIsDQogICAgInBob25lX251bWJlciI6ICIwNjc0NTY3NTQzNDU1IiwNCiAgICAiY29tcGFueV9uYW1lIjogImxvbmdza2kiLA0KICAgICJjb3VudHJ5X3R5cGUiOiAiYmNkIiwNCiAgICAibGFuZ3VhZ2VfdHlwZSI6ICJGUiIsDQogICAgImFjdG9yX3R5cGUiOiAzLA0KICAgICJjcmVhdGVkX2J5IjogIkJldHR5Ig0KICB9DQp9Jw0KDQoyLkdldCB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBQT1NUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC9jb25uZWN0aW9ucycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJzeXN0ZW0iOiAiRVJQIg0KICB9DQp9Jw0KDQoNCjMuIEdldCB1c2VyX2lkIGJ5IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IEdFVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvdXNlcnMvaWQnIFwNCiAgLS1oZWFkZXIgJ3VzZXItYWNjZXNzLXRva2VuOiAwMmE0NzVlODc2MmY1YzAwZDkyNDNjNThkZDJkMmVlZTQ3MWQ2NjBlZGJmNjlmNTZkOTdkNzU2NWFlNjI1MzYyJw0KDQoNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KMTIzNDU2Nw0KDQoxLiBDcmVhdGUgdXNlcg0KDQpjdXJsIC0tcmVwdWVzdCBQT1NUIFwNCiAgLS11cmwgaHR0cDovLzE4LjE3OS4xNzAuMTY4L3VzZXJzJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgImZ1bGxfbmFtZSI6ICJhYmJ5IiwNCiAgICAiZW1haWwiOiAiYWJieUBlbWFpbC5jb20iLA0KICAgICJwaG9uZV9udW1iZXIiOiAiMDY3NDU2NzU0MzQ1NSIsDQogICAgImNvbXBhbnlfbmFtZSI6ICJsb25nc2tpIiwNCiAgICAiY291bnRyeV90eXBlIjogImJjZCIsDQogICAgImxhbmd1YWdlX3R5cGUiOiAiRlIiLA0KICAgICJhY3Rvcl90eXBlIjogMywNCiAgICAiY3JlYXRlZF9ieSI6ICJCZXR0eSINCiAgfQ0KfScNCg0KMi5HZXQgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgUE9TVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvY29ubmVjdGlvbnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAic3lzdGVtIjogIkVSUCINCiAgfQ0KfScNCg0KDQozLiBHZXQgdXNlcl9pZCBieSB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBHRVQgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL3VzZXJzL2lkJyBcDQogIC0taGVhZGVyICd1c2VyLWFjY2Vzcy10b2tlbjogMDJhNDc1ZTg3NjJmNWMwMGQ5MjQzYzU4ZGQyZDJlZWU0NzFkNjYwZWRiZjY5ZjU2ZDk3ZDc1NjVhZTYyNTM2MicNCg0KDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjEyMzQ1NjcNCg0KMS4gQ3JlYXRlIHVzZXINCg0KY3VybCAtLXJlcHVlc3QgUE9TVCBcDQogIC0tdXJsIGh0dHA6Ly8xOC4xNzkuMTcwLjE2OC91c2VycycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJmdWxsX25hbWUiOiAiYWJieSIsDQogICAgImVtYWlsIjogImFiYnlAZW1haWwuY29tIiwNCiAgICAicGhvbmVfbnVtYmVyIjogIjA2NzQ1Njc1NDM0NTUiLA0KICAgICJjb21wYW55X25hbWUiOiAibG9uZ3NraSIsDQogICAgImNvdW50cnlfdHlwZSI6ICJiY2QiLA0KICAgICJsYW5ndWFnZV90eXBlIjogIkZSIiwNCiAgICAiYWN0b3JfdHlwZSI6IDMsDQogICAgImNyZWF0ZWRfYnkiOiAiQmV0dHkiDQogIH0NCn0nDQoNCjIuR2V0IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IFBPU1QgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL2Nvbm5lY3Rpb25zJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgInN5c3RlbSI6ICJFUlAiDQogIH0NCn0nDQoNCg0KMy4gR2V0IHVzZXJfaWQgYnkgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgR0VUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC91c2Vycy9pZCcgXA0KICAtLWhlYWRlciAndXNlci1hY2Nlc3MtdG9rZW46IDAyYTQ3NWU4NzYyZjVjMDBkOTI0M2M1OGRkMmQyZWVlNDcxZDY2MGVkYmY2OWY1NmQ5N2Q3NTY1YWU2MjUzNjInDQoNCg0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQoxMjM0NTY3DQoNCjEuIENyZWF0ZSB1c2VyDQoNCmN1cmwgLS1yZXB1ZXN0IFBPU1QgXA0KICAtLXVybCBodHRwOi8vMTguMTc5LjE3MC4xNjgvdXNlcnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAiZnVsbF9uYW1lIjogImFiYnkiLA0KICAgICJlbWFpbCI6ICJhYmJ5QGVtYWlsLmNvbSIsDQogICAgInBob25lX251bWJlciI6ICIwNjc0NTY3NTQzNDU1IiwNCiAgICAiY29tcGFueV9uYW1lIjogImxvbmdza2kiLA0KICAgICJjb3VudHJ5X3R5cGUiOiAiYmNkIiwNCiAgICAibGFuZ3VhZ2VfdHlwZSI6ICJGUiIsDQogICAgImFjdG9yX3R5cGUiOiAzLA0KICAgICJjcmVhdGVkX2J5IjogIkJldHR5Ig0KICB9DQp9Jw0KDQoyLkdldCB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBQT1NUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC9jb25uZWN0aW9ucycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJzeXN0ZW0iOiAiRVJQIg0KICB9DQp9Jw0KDQoNCjMuIEdldCB1c2VyX2lkIGJ5IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IEdFVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvdXNlcnMvaWQnIFwNCiAgLS1oZWFkZXIgJ3VzZXItYWNjZXNzLXRva2VuOiAwMmE0NzVlODc2MmY1YzAwZDkyNDNjNThkZDJkMmVlZTQ3MWQ2NjBlZGJmNjlmNTZkOTdkNzU2NWFlNjI1MzYyJw0KDQoNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KMTIzNDU2Nw0KDQoxLiBDcmVhdGUgdXNlcg0KDQpjdXJsIC0tcmVwdWVzdCBQT1NUIFwNCiAgLS11cmwgaHR0cDovLzE4LjE3OS4xNzAuMTY4L3VzZXJzJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgImZ1bGxfbmFtZSI6ICJhYmJ5IiwNCiAgICAiZW1haWwiOiAiYWJieUBlbWFpbC5jb20iLA0KICAgICJwaG9uZV9udW1iZXIiOiAiMDY3NDU2NzU0MzQ1NSIsDQogICAgImNvbXBhbnlfbmFtZSI6ICJsb25nc2tpIiwNCiAgICAiY291bnRyeV90eXBlIjogImJjZCIsDQogICAgImxhbmd1YWdlX3R5cGUiOiAiRlIiLA0KICAgICJhY3Rvcl90eXBlIjogMywNCiAgICAiY3JlYXRlZF9ieSI6ICJCZXR0eSINCiAgfQ0KfScNCg0KMi5HZXQgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgUE9TVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvY29ubmVjdGlvbnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAic3lzdGVtIjogIkVSUCINCiAgfQ0KfScNCg0KDQozLiBHZXQgdXNlcl9pZCBieSB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBHRVQgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL3VzZXJzL2lkJyBcDQogIC0taGVhZGVyICd1c2VyLWFjY2Vzcy10b2tlbjogMDJhNDc1ZTg3NjJmNWMwMGQ5MjQzYzU4ZGQyZDJlZWU0NzFkNjYwZWRiZjY5ZjU2ZDk3ZDc1NjVhZTYyNTM2MicNCg0KDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjEyMzQ1NjcNCg0KMS4gQ3JlYXRlIHVzZXINCg0KY3VybCAtLXJlcHVlc3QgUE9TVCBcDQogIC0tdXJsIGh0dHA6Ly8xOC4xNzkuMTcwLjE2OC91c2VycycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJmdWxsX25hbWUiOiAiYWJieSIsDQogICAgImVtYWlsIjogImFiYnlAZW1haWwuY29tIiwNCiAgICAicGhvbmVfbnVtYmVyIjogIjA2NzQ1Njc1NDM0NTUiLA0KICAgICJjb21wYW55X25hbWUiOiAibG9uZ3NraSIsDQogICAgImNvdW50cnlfdHlwZSI6ICJiY2QiLA0KICAgICJsYW5ndWFnZV90eXBlIjogIkZSIiwNCiAgICAiYWN0b3JfdHlwZSI6IDMsDQogICAgImNyZWF0ZWRfYnkiOiAiQmV0dHkiDQogIH0NCn0nDQoNCjIuR2V0IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IFBPU1QgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL2Nvbm5lY3Rpb25zJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgInN5c3RlbSI6ICJFUlAiDQogIH0NCn0nDQoNCg0KMy4gR2V0IHVzZXJfaWQgYnkgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgR0VUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC91c2Vycy9pZCcgXA0KICAtLWhlYWRlciAndXNlci1hY2Nlc3MtdG9rZW46IDAyYTQ3NWU4NzYyZjVjMDBkOTI0M2M1OGRkMmQyZWVlNDcxZDY2MGVkYmY2OWY1NmQ5N2Q3NTY1YWU2MjUzNjInDQoNCg0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQoxMjM0NTY3DQoNCjEuIENyZWF0ZSB1c2VyDQoNCmN1cmwgLS1yZXB1ZXN0IFBPU1QgXA0KICAtLXVybCBodHRwOi8vMTguMTc5LjE3MC4xNjgvdXNlcnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAiZnVsbF9uYW1lIjogImFiYnkiLA0KICAgICJlbWFpbCI6ICJhYmJ5QGVtYWlsLmNvbSIsDQogICAgInBob25lX251bWJlciI6ICIwNjc0NTY3NTQzNDU1IiwNCiAgICAiY29tcGFueV9uYW1lIjogImxvbmdza2kiLA0KICAgICJjb3VudHJ5X3R5cGUiOiAiYmNkIiwNCiAgICAibGFuZ3VhZ2VfdHlwZSI6ICJGUiIsDQogICAgImFjdG9yX3R5cGUiOiAzLA0KICAgICJjcmVhdGVkX2J5IjogIkJldHR5Ig0KICB9DQp9Jw0KDQoyLkdldCB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBQT1NUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC9jb25uZWN0aW9ucycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJzeXN0ZW0iOiAiRVJQIg0KICB9DQp9Jw0KDQoNCjMuIEdldCB1c2VyX2lkIGJ5IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IEdFVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvdXNlcnMvaWQnIFwNCiAgLS1oZWFkZXIgJ3VzZXItYWNjZXNzLXRva2VuOiAwMmE0NzVlODc2MmY1YzAwZDkyNDNjNThkZDJkMmVlZTQ3MWQ2NjBlZGJmNjlmNTZkOTdkNzU2NWFlNjI1MzYyJw0KDQoNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KMTIzNDU2Nw0KDQoxLiBDcmVhdGUgdXNlcg0KDQpjdXJsIC0tcmVwdWVzdCBQT1NUIFwNCiAgLS11cmwgaHR0cDovLzE4LjE3OS4xNzAuMTY4L3VzZXJzJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgImZ1bGxfbmFtZSI6ICJhYmJ5IiwNCiAgICAiZW1haWwiOiAiYWJieUBlbWFpbC5jb20iLA0KICAgICJwaG9uZV9udW1iZXIiOiAiMDY3NDU2NzU0MzQ1NSIsDQogICAgImNvbXBhbnlfbmFtZSI6ICJsb25nc2tpIiwNCiAgICAiY291bnRyeV90eXBlIjogImJjZCIsDQogICAgImxhbmd1YWdlX3R5cGUiOiAiRlIiLA0KICAgICJhY3Rvcl90eXBlIjogMywNCiAgICAiY3JlYXRlZF9ieSI6ICJCZXR0eSINCiAgfQ0KfScNCg0KMi5HZXQgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgUE9TVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvY29ubmVjdGlvbnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAic3lzdGVtIjogIkVSUCINCiAgfQ0KfScNCg0KDQozLiBHZXQgdXNlcl9pZCBieSB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBHRVQgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL3VzZXJzL2lkJyBcDQogIC0taGVhZGVyICd1c2VyLWFjY2Vzcy10b2tlbjogMDJhNDc1ZTg3NjJmNWMwMGQ5MjQzYzU4ZGQyZDJlZWU0NzFkNjYwZWRiZjY5ZjU2ZDk3ZDc1NjVhZTYyNTM2MicNCg0KDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjEyMzQ1NjcNCg0KMS4gQ3JlYXRlIHVzZXINCg0KY3VybCAtLXJlcHVlc3QgUE9TVCBcDQogIC0tdXJsIGh0dHA6Ly8xOC4xNzkuMTcwLjE2OC91c2VycycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJmdWxsX25hbWUiOiAiYWJieSIsDQogICAgImVtYWlsIjogImFiYnlAZW1haWwuY29tIiwNCiAgICAicGhvbmVfbnVtYmVyIjogIjA2NzQ1Njc1NDM0NTUiLA0KICAgICJjb21wYW55X25hbWUiOiAibG9uZ3NraSIsDQogICAgImNvdW50cnlfdHlwZSI6ICJiY2QiLA0KICAgICJsYW5ndWFnZV90eXBlIjogIkZSIiwNCiAgICAiYWN0b3JfdHlwZSI6IDMsDQogICAgImNyZWF0ZWRfYnkiOiAiQmV0dHkiDQogIH0NCn0nDQoNCjIuR2V0IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IFBPU1QgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL2Nvbm5lY3Rpb25zJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgInN5c3RlbSI6ICJFUlAiDQogIH0NCn0nDQoNCg0KMy4gR2V0IHVzZXJfaWQgYnkgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgR0VUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC91c2Vycy9pZCcgXA0KICAtLWhlYWRlciAndXNlci1hY2Nlc3MtdG9rZW46IDAyYTQ3NWU4NzYyZjVjMDBkOTI0M2M1OGRkMmQyZWVlNDcxZDY2MGVkYmY2OWY1NmQ5N2Q3NTY1YWU2MjUzNjInDQoNCg0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQoxMjM0NTY3DQoNCjEuIENyZWF0ZSB1c2VyDQoNCmN1cmwgLS1yZXB1ZXN0IFBPU1QgXA0KICAtLXVybCBodHRwOi8vMTguMTc5LjE3MC4xNjgvdXNlcnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAiZnVsbF9uYW1lIjogImFiYnkiLA0KICAgICJlbWFpbCI6ICJhYmJ5QGVtYWlsLmNvbSIsDQogICAgInBob25lX251bWJlciI6ICIwNjc0NTY3NTQzNDU1IiwNCiAgICAiY29tcGFueV9uYW1lIjogImxvbmdza2kiLA0KICAgICJjb3VudHJ5X3R5cGUiOiAiYmNkIiwNCiAgICAibGFuZ3VhZ2VfdHlwZSI6ICJGUiIsDQogICAgImFjdG9yX3R5cGUiOiAzLA0KICAgICJjcmVhdGVkX2J5IjogIkJldHR5Ig0KICB9DQp9Jw0KDQoyLkdldCB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBQT1NUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC9jb25uZWN0aW9ucycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJzeXN0ZW0iOiAiRVJQIg0KICB9DQp9Jw0KDQoNCjMuIEdldCB1c2VyX2lkIGJ5IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IEdFVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvdXNlcnMvaWQnIFwNCiAgLS1oZWFkZXIgJ3VzZXItYWNjZXNzLXRva2VuOiAwMmE0NzVlODc2MmY1YzAwZDkyNDNjNThkZDJkMmVlZTQ3MWQ2NjBlZGJmNjlmNTZkOTdkNzU2NWFlNjI1MzYyJw0KDQoNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KMTIzNDU2Nw0KDQoxLiBDcmVhdGUgdXNlcg0KDQpjdXJsIC0tcmVwdWVzdCBQT1NUIFwNCiAgLS11cmwgaHR0cDovLzE4LjE3OS4xNzAuMTY4L3VzZXJzJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgImZ1bGxfbmFtZSI6ICJhYmJ5IiwNCiAgICAiZW1haWwiOiAiYWJieUBlbWFpbC5jb20iLA0KICAgICJwaG9uZV9udW1iZXIiOiAiMDY3NDU2NzU0MzQ1NSIsDQogICAgImNvbXBhbnlfbmFtZSI6ICJsb25nc2tpIiwNCiAgICAiY291bnRyeV90eXBlIjogImJjZCIsDQogICAgImxhbmd1YWdlX3R5cGUiOiAiRlIiLA0KICAgICJhY3Rvcl90eXBlIjogMywNCiAgICAiY3JlYXRlZF9ieSI6ICJCZXR0eSINCiAgfQ0KfScNCg0KMi5HZXQgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgUE9TVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvY29ubmVjdGlvbnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAic3lzdGVtIjogIkVSUCINCiAgfQ0KfScNCg0KDQozLiBHZXQgdXNlcl9pZCBieSB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBHRVQgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL3VzZXJzL2lkJyBcDQogIC0taGVhZGVyICd1c2VyLWFjY2Vzcy10b2tlbjogMDJhNDc1ZTg3NjJmNWMwMGQ5MjQzYzU4ZGQyZDJlZWU0NzFkNjYwZWRiZjY5ZjU2ZDk3ZDc1NjVhZTYyNTM2MicNCg0KDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjEyMzQ1NjcNCg0KMS4gQ3JlYXRlIHVzZXINCg0KY3VybCAtLXJlcHVlc3QgUE9TVCBcDQogIC0tdXJsIGh0dHA6Ly8xOC4xNzkuMTcwLjE2OC91c2VycycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJmdWxsX25hbWUiOiAiYWJieSIsDQogICAgImVtYWlsIjogImFiYnlAZW1haWwuY29tIiwNCiAgICAicGhvbmVfbnVtYmVyIjogIjA2NzQ1Njc1NDM0NTUiLA0KICAgICJjb21wYW55X25hbWUiOiAibG9uZ3NraSIsDQogICAgImNvdW50cnlfdHlwZSI6ICJiY2QiLA0KICAgICJsYW5ndWFnZV90eXBlIjogIkZSIiwNCiAgICAiYWN0b3JfdHlwZSI6IDMsDQogICAgImNyZWF0ZWRfYnkiOiAiQmV0dHkiDQogIH0NCn0nDQoNCjIuR2V0IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IFBPU1QgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL2Nvbm5lY3Rpb25zJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgInN5c3RlbSI6ICJFUlAiDQogIH0NCn0nDQoNCg0KMy4gR2V0IHVzZXJfaWQgYnkgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgR0VUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC91c2Vycy9pZCcgXA0KICAtLWhlYWRlciAndXNlci1hY2Nlc3MtdG9rZW46IDAyYTQ3NWU4NzYyZjVjMDBkOTI0M2M1OGRkMmQyZWVlNDcxZDY2MGVkYmY2OWY1NmQ5N2Q3NTY1YWU2MjUzNjInDQoNCg0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQoxMjM0NTY3DQoNCjEuIENyZWF0ZSB1c2VyDQoNCmN1cmwgLS1yZXB1ZXN0IFBPU1QgXA0KICAtLXVybCBodHRwOi8vMTguMTc5LjE3MC4xNjgvdXNlcnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAiZnVsbF9uYW1lIjogImFiYnkiLA0KICAgICJlbWFpbCI6ICJhYmJ5QGVtYWlsLmNvbSIsDQogICAgInBob25lX251bWJlciI6ICIwNjc0NTY3NTQzNDU1IiwNCiAgICAiY29tcGFueV9uYW1lIjogImxvbmdza2kiLA0KICAgICJjb3VudHJ5X3R5cGUiOiAiYmNkIiwNCiAgICAibGFuZ3VhZ2VfdHlwZSI6ICJGUiIsDQogICAgImFjdG9yX3R5cGUiOiAzLA0KICAgICJjcmVhdGVkX2J5IjogIkJldHR5Ig0KICB9DQp9Jw0KDQoyLkdldCB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBQT1NUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC9jb25uZWN0aW9ucycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJzeXN0ZW0iOiAiRVJQIg0KICB9DQp9Jw0KDQoNCjMuIEdldCB1c2VyX2lkIGJ5IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IEdFVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvdXNlcnMvaWQnIFwNCiAgLS1oZWFkZXIgJ3VzZXItYWNjZXNzLXRva2VuOiAwMmE0NzVlODc2MmY1YzAwZDkyNDNjNThkZDJkMmVlZTQ3MWQ2NjBlZGJmNjlmNTZkOTdkNzU2NWFlNjI1MzYyJw0KDQoNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KMTIzNDU2Nw0KDQoxLiBDcmVhdGUgdXNlcg0KDQpjdXJsIC0tcmVwdWVzdCBQT1NUIFwNCiAgLS11cmwgaHR0cDovLzE4LjE3OS4xNzAuMTY4L3VzZXJzJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgImZ1bGxfbmFtZSI6ICJhYmJ5IiwNCiAgICAiZW1haWwiOiAiYWJieUBlbWFpbC5jb20iLA0KICAgICJwaG9uZV9udW1iZXIiOiAiMDY3NDU2NzU0MzQ1NSIsDQogICAgImNvbXBhbnlfbmFtZSI6ICJsb25nc2tpIiwNCiAgICAiY291bnRyeV90eXBlIjogImJjZCIsDQogICAgImxhbmd1YWdlX3R5cGUiOiAiRlIiLA0KICAgICJhY3Rvcl90eXBlIjogMywNCiAgICAiY3JlYXRlZF9ieSI6ICJCZXR0eSINCiAgfQ0KfScNCg0KMi5HZXQgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgUE9TVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvY29ubmVjdGlvbnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAic3lzdGVtIjogIkVSUCINCiAgfQ0KfScNCg0KDQozLiBHZXQgdXNlcl9pZCBieSB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBHRVQgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL3VzZXJzL2lkJyBcDQogIC0taGVhZGVyICd1c2VyLWFjY2Vzcy10b2tlbjogMDJhNDc1ZTg3NjJmNWMwMGQ5MjQzYzU4ZGQyZDJlZWU0NzFkNjYwZWRiZjY5ZjU2ZDk3ZDc1NjVhZTYyNTM2MicNCg0KDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjEyMzQ1NjcNCg0KMS4gQ3JlYXRlIHVzZXINCg0KY3VybCAtLXJlcHVlc3QgUE9TVCBcDQogIC0tdXJsIGh0dHA6Ly8xOC4xNzkuMTcwLjE2OC91c2VycycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJmdWxsX25hbWUiOiAiYWJieSIsDQogICAgImVtYWlsIjogImFiYnlAZW1haWwuY29tIiwNCiAgICAicGhvbmVfbnVtYmVyIjogIjA2NzQ1Njc1NDM0NTUiLA0KICAgICJjb21wYW55X25hbWUiOiAibG9uZ3NraSIsDQogICAgImNvdW50cnlfdHlwZSI6ICJiY2QiLA0KICAgICJsYW5ndWFnZV90eXBlIjogIkZSIiwNCiAgICAiYWN0b3JfdHlwZSI6IDMsDQogICAgImNyZWF0ZWRfYnkiOiAiQmV0dHkiDQogIH0NCn0nDQoNCjIuR2V0IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IFBPU1QgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL2Nvbm5lY3Rpb25zJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgInN5c3RlbSI6ICJFUlAiDQogIH0NCn0nDQoNCg0KMy4gR2V0IHVzZXJfaWQgYnkgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgR0VUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC91c2Vycy9pZCcgXA0KICAtLWhlYWRlciAndXNlci1hY2Nlc3MtdG9rZW46IDAyYTQ3NWU4NzYyZjVjMDBkOTI0M2M1OGRkMmQyZWVlNDcxZDY2MGVkYmY2OWY1NmQ5N2Q3NTY1YWU2MjUzNjInDQoNCg0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQoxMjM0NTY3DQoNCjEuIENyZWF0ZSB1c2VyDQoNCmN1cmwgLS1yZXB1ZXN0IFBPU1QgXA0KICAtLXVybCBodHRwOi8vMTguMTc5LjE3MC4xNjgvdXNlcnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAiZnVsbF9uYW1lIjogImFiYnkiLA0KICAgICJlbWFpbCI6ICJhYmJ5QGVtYWlsLmNvbSIsDQogICAgInBob25lX251bWJlciI6ICIwNjc0NTY3NTQzNDU1IiwNCiAgICAiY29tcGFueV9uYW1lIjogImxvbmdza2kiLA0KICAgICJjb3VudHJ5X3R5cGUiOiAiYmNkIiwNCiAgICAibGFuZ3VhZ2VfdHlwZSI6ICJGUiIsDQogICAgImFjdG9yX3R5cGUiOiAzLA0KICAgICJjcmVhdGVkX2J5IjogIkJldHR5Ig0KICB9DQp9Jw0KDQoyLkdldCB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBQT1NUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC9jb25uZWN0aW9ucycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJzeXN0ZW0iOiAiRVJQIg0KICB9DQp9Jw0KDQoNCjMuIEdldCB1c2VyX2lkIGJ5IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IEdFVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvdXNlcnMvaWQnIFwNCiAgLS1oZWFkZXIgJ3VzZXItYWNjZXNzLXRva2VuOiAwMmE0NzVlODc2MmY1YzAwZDkyNDNjNThkZDJkMmVlZTQ3MWQ2NjBlZGJmNjlmNTZkOTdkNzU2NWFlNjI1MzYyJw0KDQoNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KMTIzNDU2Nw0KDQoxLiBDcmVhdGUgdXNlcg0KDQpjdXJsIC0tcmVwdWVzdCBQT1NUIFwNCiAgLS11cmwgaHR0cDovLzE4LjE3OS4xNzAuMTY4L3VzZXJzJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgImZ1bGxfbmFtZSI6ICJhYmJ5IiwNCiAgICAiZW1haWwiOiAiYWJieUBlbWFpbC5jb20iLA0KICAgICJwaG9uZV9udW1iZXIiOiAiMDY3NDU2NzU0MzQ1NSIsDQogICAgImNvbXBhbnlfbmFtZSI6ICJsb25nc2tpIiwNCiAgICAiY291bnRyeV90eXBlIjogImJjZCIsDQogICAgImxhbmd1YWdlX3R5cGUiOiAiRlIiLA0KICAgICJhY3Rvcl90eXBlIjogMywNCiAgICAiY3JlYXRlZF9ieSI6ICJCZXR0eSINCiAgfQ0KfScNCg0KMi5HZXQgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgUE9TVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvY29ubmVjdGlvbnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAic3lzdGVtIjogIkVSUCINCiAgfQ0KfScNCg0KDQozLiBHZXQgdXNlcl9pZCBieSB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBHRVQgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL3VzZXJzL2lkJyBcDQogIC0taGVhZGVyICd1c2VyLWFjY2Vzcy10b2tlbjogMDJhNDc1ZTg3NjJmNWMwMGQ5MjQzYzU4ZGQyZDJlZWU0NzFkNjYwZWRiZjY5ZjU2ZDk3ZDc1NjVhZTYyNTM2MicNCg0KDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjEyMzQ1NjcNCg0KMS4gQ3JlYXRlIHVzZXINCg0KY3VybCAtLXJlcHVlc3QgUE9TVCBcDQogIC0tdXJsIGh0dHA6Ly8xOC4xNzkuMTcwLjE2OC91c2VycycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJmdWxsX25hbWUiOiAiYWJieSIsDQogICAgImVtYWlsIjogImFiYnlAZW1haWwuY29tIiwNCiAgICAicGhvbmVfbnVtYmVyIjogIjA2NzQ1Njc1NDM0NTUiLA0KICAgICJjb21wYW55X25hbWUiOiAibG9uZ3NraSIsDQogICAgImNvdW50cnlfdHlwZSI6ICJiY2QiLA0KICAgICJsYW5ndWFnZV90eXBlIjogIkZSIiwNCiAgICAiYWN0b3JfdHlwZSI6IDMsDQogICAgImNyZWF0ZWRfYnkiOiAiQmV0dHkiDQogIH0NCn0nDQoNCjIuR2V0IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IFBPU1QgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL2Nvbm5lY3Rpb25zJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgInN5c3RlbSI6ICJFUlAiDQogIH0NCn0nDQoNCg0KMy4gR2V0IHVzZXJfaWQgYnkgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgR0VUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC91c2Vycy9pZCcgXA0KICAtLWhlYWRlciAndXNlci1hY2Nlc3MtdG9rZW46IDAyYTQ3NWU4NzYyZjVjMDBkOTI0M2M1OGRkMmQyZWVlNDcxZDY2MGVkYmY2OWY1NmQ5N2Q3NTY1YWU2MjUzNjInDQoNCg0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQoxMjM0NTY3DQoNCjEuIENyZWF0ZSB1c2VyDQoNCmN1cmwgLS1yZXB1ZXN0IFBPU1QgXA0KICAtLXVybCBodHRwOi8vMTguMTc5LjE3MC4xNjgvdXNlcnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAiZnVsbF9uYW1lIjogImFiYnkiLA0KICAgICJlbWFpbCI6ICJhYmJ5QGVtYWlsLmNvbSIsDQogICAgInBob25lX251bWJlciI6ICIwNjc0NTY3NTQzNDU1IiwNCiAgICAiY29tcGFueV9uYW1lIjogImxvbmdza2kiLA0KICAgICJjb3VudHJ5X3R5cGUiOiAiYmNkIiwNCiAgICAibGFuZ3VhZ2VfdHlwZSI6ICJGUiIsDQogICAgImFjdG9yX3R5cGUiOiAzLA0KICAgICJjcmVhdGVkX2J5IjogIkJldHR5Ig0KICB9DQp9Jw0KDQoyLkdldCB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBQT1NUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC9jb25uZWN0aW9ucycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJzeXN0ZW0iOiAiRVJQIg0KICB9DQp9Jw0KDQoNCjMuIEdldCB1c2VyX2lkIGJ5IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IEdFVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvdXNlcnMvaWQnIFwNCiAgLS1oZWFkZXIgJ3VzZXItYWNjZXNzLXRva2VuOiAwMmE0NzVlODc2MmY1YzAwZDkyNDNjNThkZDJkMmVlZTQ3MWQ2NjBlZGJmNjlmNTZkOTdkNzU2NWFlNjI1MzYyJw0KDQoNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KMTIzNDU2Nw0KDQoxLiBDcmVhdGUgdXNlcg0KDQpjdXJsIC0tcmVwdWVzdCBQT1NUIFwNCiAgLS11cmwgaHR0cDovLzE4LjE3OS4xNzAuMTY4L3VzZXJzJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgImZ1bGxfbmFtZSI6ICJhYmJ5IiwNCiAgICAiZW1haWwiOiAiYWJieUBlbWFpbC5jb20iLA0KICAgICJwaG9uZV9udW1iZXIiOiAiMDY3NDU2NzU0MzQ1NSIsDQogICAgImNvbXBhbnlfbmFtZSI6ICJsb25nc2tpIiwNCiAgICAiY291bnRyeV90eXBlIjogImJjZCIsDQogICAgImxhbmd1YWdlX3R5cGUiOiAiRlIiLA0KICAgICJhY3Rvcl90eXBlIjogMywNCiAgICAiY3JlYXRlZF9ieSI6ICJCZXR0eSINCiAgfQ0KfScNCg0KMi5HZXQgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgUE9TVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvY29ubmVjdGlvbnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAic3lzdGVtIjogIkVSUCINCiAgfQ0KfScNCg0KDQozLiBHZXQgdXNlcl9pZCBieSB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBHRVQgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL3VzZXJzL2lkJyBcDQogIC0taGVhZGVyICd1c2VyLWFjY2Vzcy10b2tlbjogMDJhNDc1ZTg3NjJmNWMwMGQ5MjQzYzU4ZGQyZDJlZWU0NzFkNjYwZWRiZjY5ZjU2ZDk3ZDc1NjVhZTYyNTM2MicNCg0KDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjEyMzQ1NjcNCg0KMS4gQ3JlYXRlIHVzZXINCg0KY3VybCAtLXJlcHVlc3QgUE9TVCBcDQogIC0tdXJsIGh0dHA6Ly8xOC4xNzkuMTcwLjE2OC91c2VycycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJmdWxsX25hbWUiOiAiYWJieSIsDQogICAgImVtYWlsIjogImFiYnlAZW1haWwuY29tIiwNCiAgICAicGhvbmVfbnVtYmVyIjogIjA2NzQ1Njc1NDM0NTUiLA0KICAgICJjb21wYW55X25hbWUiOiAibG9uZ3NraSIsDQogICAgImNvdW50cnlfdHlwZSI6ICJiY2QiLA0KICAgICJsYW5ndWFnZV90eXBlIjogIkZSIiwNCiAgICAiYWN0b3JfdHlwZSI6IDMsDQogICAgImNyZWF0ZWRfYnkiOiAiQmV0dHkiDQogIH0NCn0nDQoNCjIuR2V0IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IFBPU1QgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL2Nvbm5lY3Rpb25zJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgInN5c3RlbSI6ICJFUlAiDQogIH0NCn0nDQoNCg0KMy4gR2V0IHVzZXJfaWQgYnkgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgR0VUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC91c2Vycy9pZCcgXA0KICAtLWhlYWRlciAndXNlci1hY2Nlc3MtdG9rZW46IDAyYTQ3NWU4NzYyZjVjMDBkOTI0M2M1OGRkMmQyZWVlNDcxZDY2MGVkYmY2OWY1NmQ5N2Q3NTY1YWU2MjUzNjInDQoNCg0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQoxMjM0NTY3DQoNCjEuIENyZWF0ZSB1c2VyDQoNCmN1cmwgLS1yZXB1ZXN0IFBPU1QgXA0KICAtLXVybCBodHRwOi8vMTguMTc5LjE3MC4xNjgvdXNlcnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAiZnVsbF9uYW1lIjogImFiYnkiLA0KICAgICJlbWFpbCI6ICJhYmJ5QGVtYWlsLmNvbSIsDQogICAgInBob25lX251bWJlciI6ICIwNjc0NTY3NTQzNDU1IiwNCiAgICAiY29tcGFueV9uYW1lIjogImxvbmdza2kiLA0KICAgICJjb3VudHJ5X3R5cGUiOiAiYmNkIiwNCiAgICAibGFuZ3VhZ2VfdHlwZSI6ICJGUiIsDQogICAgImFjdG9yX3R5cGUiOiAzLA0KICAgICJjcmVhdGVkX2J5IjogIkJldHR5Ig0KICB9DQp9Jw0KDQoyLkdldCB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBQT1NUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC9jb25uZWN0aW9ucycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJzeXN0ZW0iOiAiRVJQIg0KICB9DQp9Jw0KDQoNCjMuIEdldCB1c2VyX2lkIGJ5IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IEdFVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvdXNlcnMvaWQnIFwNCiAgLS1oZWFkZXIgJ3VzZXItYWNjZXNzLXRva2VuOiAwMmE0NzVlODc2MmY1YzAwZDkyNDNjNThkZDJkMmVlZTQ3MWQ2NjBlZGJmNjlmNTZkOTdkNzU2NWFlNjI1MzYyJw0KDQoNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KMTIzNDU2Nw0KDQoxLiBDcmVhdGUgdXNlcg0KDQpjdXJsIC0tcmVwdWVzdCBQT1NUIFwNCiAgLS11cmwgaHR0cDovLzE4LjE3OS4xNzAuMTY4L3VzZXJzJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgImZ1bGxfbmFtZSI6ICJhYmJ5IiwNCiAgICAiZW1haWwiOiAiYWJieUBlbWFpbC5jb20iLA0KICAgICJwaG9uZV9udW1iZXIiOiAiMDY3NDU2NzU0MzQ1NSIsDQogICAgImNvbXBhbnlfbmFtZSI6ICJsb25nc2tpIiwNCiAgICAiY291bnRyeV90eXBlIjogImJjZCIsDQogICAgImxhbmd1YWdlX3R5cGUiOiAiRlIiLA0KICAgICJhY3Rvcl90eXBlIjogMywNCiAgICAiY3JlYXRlZF9ieSI6ICJCZXR0eSINCiAgfQ0KfScNCg0KMi5HZXQgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgUE9TVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvY29ubmVjdGlvbnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAic3lzdGVtIjogIkVSUCINCiAgfQ0KfScNCg0KDQozLiBHZXQgdXNlcl9pZCBieSB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBHRVQgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL3VzZXJzL2lkJyBcDQogIC0taGVhZGVyICd1c2VyLWFjY2Vzcy10b2tlbjogMDJhNDc1ZTg3NjJmNWMwMGQ5MjQzYzU4ZGQyZDJlZWU0NzFkNjYwZWRiZjY5ZjU2ZDk3ZDc1NjVhZTYyNTM2MicNCg0KDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjEyMzQ1NjcNCg0KMS4gQ3JlYXRlIHVzZXINCg0KY3VybCAtLXJlcHVlc3QgUE9TVCBcDQogIC0tdXJsIGh0dHA6Ly8xOC4xNzkuMTcwLjE2OC91c2VycycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJmdWxsX25hbWUiOiAiYWJieSIsDQogICAgImVtYWlsIjogImFiYnlAZW1haWwuY29tIiwNCiAgICAicGhvbmVfbnVtYmVyIjogIjA2NzQ1Njc1NDM0NTUiLA0KICAgICJjb21wYW55X25hbWUiOiAibG9uZ3NraSIsDQogICAgImNvdW50cnlfdHlwZSI6ICJiY2QiLA0KICAgICJsYW5ndWFnZV90eXBlIjogIkZSIiwNCiAgICAiYWN0b3JfdHlwZSI6IDMsDQogICAgImNyZWF0ZWRfYnkiOiAiQmV0dHkiDQogIH0NCn0nDQoNCjIuR2V0IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IFBPU1QgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL2Nvbm5lY3Rpb25zJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgInN5c3RlbSI6ICJFUlAiDQogIH0NCn0nDQoNCg0KMy4gR2V0IHVzZXJfaWQgYnkgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgR0VUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC91c2Vycy9pZCcgXA0KICAtLWhlYWRlciAndXNlci1hY2Nlc3MtdG9rZW46IDAyYTQ3NWU4NzYyZjVjMDBkOTI0M2M1OGRkMmQyZWVlNDcxZDY2MGVkYmY2OWY1NmQ5N2Q3NTY1YWU2MjUzNjInDQoNCg0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQoxMjM0NTY3DQoNCjEuIENyZWF0ZSB1c2VyDQoNCmN1cmwgLS1yZXB1ZXN0IFBPU1QgXA0KICAtLXVybCBodHRwOi8vMTguMTc5LjE3MC4xNjgvdXNlcnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAiZnVsbF9uYW1lIjogImFiYnkiLA0KICAgICJlbWFpbCI6ICJhYmJ5QGVtYWlsLmNvbSIsDQogICAgInBob25lX251bWJlciI6ICIwNjc0NTY3NTQzNDU1IiwNCiAgICAiY29tcGFueV9uYW1lIjogImxvbmdza2kiLA0KICAgICJjb3VudHJ5X3R5cGUiOiAiYmNkIiwNCiAgICAibGFuZ3VhZ2VfdHlwZSI6ICJGUiIsDQogICAgImFjdG9yX3R5cGUiOiAzLA0KICAgICJjcmVhdGVkX2J5IjogIkJldHR5Ig0KICB9DQp9Jw0KDQoyLkdldCB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBQT1NUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC9jb25uZWN0aW9ucycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJzeXN0ZW0iOiAiRVJQIg0KICB9DQp9Jw0KDQoNCjMuIEdldCB1c2VyX2lkIGJ5IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IEdFVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvdXNlcnMvaWQnIFwNCiAgLS1oZWFkZXIgJ3VzZXItYWNjZXNzLXRva2VuOiAwMmE0NzVlODc2MmY1YzAwZDkyNDNjNThkZDJkMmVlZTQ3MWQ2NjBlZGJmNjlmNTZkOTdkNzU2NWFlNjI1MzYyJw0KDQoNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KMTIzNDU2Nw0KDQoxLiBDcmVhdGUgdXNlcg0KDQpjdXJsIC0tcmVwdWVzdCBQT1NUIFwNCiAgLS11cmwgaHR0cDovLzE4LjE3OS4xNzAuMTY4L3VzZXJzJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgImZ1bGxfbmFtZSI6ICJhYmJ5IiwNCiAgICAiZW1haWwiOiAiYWJieUBlbWFpbC5jb20iLA0KICAgICJwaG9uZV9udW1iZXIiOiAiMDY3NDU2NzU0MzQ1NSIsDQogICAgImNvbXBhbnlfbmFtZSI6ICJsb25nc2tpIiwNCiAgICAiY291bnRyeV90eXBlIjogImJjZCIsDQogICAgImxhbmd1YWdlX3R5cGUiOiAiRlIiLA0KICAgICJhY3Rvcl90eXBlIjogMywNCiAgICAiY3JlYXRlZF9ieSI6ICJCZXR0eSINCiAgfQ0KfScNCg0KMi5HZXQgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgUE9TVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvY29ubmVjdGlvbnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAic3lzdGVtIjogIkVSUCINCiAgfQ0KfScNCg0KDQozLiBHZXQgdXNlcl9pZCBieSB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBHRVQgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL3VzZXJzL2lkJyBcDQogIC0taGVhZGVyICd1c2VyLWFjY2Vzcy10b2tlbjogMDJhNDc1ZTg3NjJmNWMwMGQ5MjQzYzU4ZGQyZDJlZWU0NzFkNjYwZWRiZjY5ZjU2ZDk3ZDc1NjVhZTYyNTM2MicNCg0KDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjEyMzQ1NjcNCg0KMS4gQ3JlYXRlIHVzZXINCg0KY3VybCAtLXJlcHVlc3QgUE9TVCBcDQogIC0tdXJsIGh0dHA6Ly8xOC4xNzkuMTcwLjE2OC91c2VycycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJmdWxsX25hbWUiOiAiYWJieSIsDQogICAgImVtYWlsIjogImFiYnlAZW1haWwuY29tIiwNCiAgICAicGhvbmVfbnVtYmVyIjogIjA2NzQ1Njc1NDM0NTUiLA0KICAgICJjb21wYW55X25hbWUiOiAibG9uZ3NraSIsDQogICAgImNvdW50cnlfdHlwZSI6ICJiY2QiLA0KICAgICJsYW5ndWFnZV90eXBlIjogIkZSIiwNCiAgICAiYWN0b3JfdHlwZSI6IDMsDQogICAgImNyZWF0ZWRfYnkiOiAiQmV0dHkiDQogIH0NCn0nDQoNCjIuR2V0IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IFBPU1QgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL2Nvbm5lY3Rpb25zJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgInN5c3RlbSI6ICJFUlAiDQogIH0NCn0nDQoNCg0KMy4gR2V0IHVzZXJfaWQgYnkgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgR0VUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC91c2Vycy9pZCcgXA0KICAtLWhlYWRlciAndXNlci1hY2Nlc3MtdG9rZW46IDAyYTQ3NWU4NzYyZjVjMDBkOTI0M2M1OGRkMmQyZWVlNDcxZDY2MGVkYmY2OWY1NmQ5N2Q3NTY1YWU2MjUzNjInDQoNCg0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQoxMjM0NTY3DQoNCjEuIENyZWF0ZSB1c2VyDQoNCmN1cmwgLS1yZXB1ZXN0IFBPU1QgXA0KICAtLXVybCBodHRwOi8vMTguMTc5LjE3MC4xNjgvdXNlcnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAiZnVsbF9uYW1lIjogImFiYnkiLA0KICAgICJlbWFpbCI6ICJhYmJ5QGVtYWlsLmNvbSIsDQogICAgInBob25lX251bWJlciI6ICIwNjc0NTY3NTQzNDU1IiwNCiAgICAiY29tcGFueV9uYW1lIjogImxvbmdza2kiLA0KICAgICJjb3VudHJ5X3R5cGUiOiAiYmNkIiwNCiAgICAibGFuZ3VhZ2VfdHlwZSI6ICJGUiIsDQogICAgImFjdG9yX3R5cGUiOiAzLA0KICAgICJjcmVhdGVkX2J5IjogIkJldHR5Ig0KICB9DQp9Jw0KDQoyLkdldCB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBQT1NUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC9jb25uZWN0aW9ucycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJzeXN0ZW0iOiAiRVJQIg0KICB9DQp9Jw0KDQoNCjMuIEdldCB1c2VyX2lkIGJ5IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IEdFVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvdXNlcnMvaWQnIFwNCiAgLS1oZWFkZXIgJ3VzZXItYWNjZXNzLXRva2VuOiAwMmE0NzVlODc2MmY1YzAwZDkyNDNjNThkZDJkMmVlZTQ3MWQ2NjBlZGJmNjlmNTZkOTdkNzU2NWFlNjI1MzYyJw0KDQoNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KMTIzNDU2Nw0KDQoxLiBDcmVhdGUgdXNlcg0KDQpjdXJsIC0tcmVwdWVzdCBQT1NUIFwNCiAgLS11cmwgaHR0cDovLzE4LjE3OS4xNzAuMTY4L3VzZXJzJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgImZ1bGxfbmFtZSI6ICJhYmJ5IiwNCiAgICAiZW1haWwiOiAiYWJieUBlbWFpbC5jb20iLA0KICAgICJwaG9uZV9udW1iZXIiOiAiMDY3NDU2NzU0MzQ1NSIsDQogICAgImNvbXBhbnlfbmFtZSI6ICJsb25nc2tpIiwNCiAgICAiY291bnRyeV90eXBlIjogImJjZCIsDQogICAgImxhbmd1YWdlX3R5cGUiOiAiRlIiLA0KICAgICJhY3Rvcl90eXBlIjogMywNCiAgICAiY3JlYXRlZF9ieSI6ICJCZXR0eSINCiAgfQ0KfScNCg0KMi5HZXQgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgUE9TVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvY29ubmVjdGlvbnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAic3lzdGVtIjogIkVSUCINCiAgfQ0KfScNCg0KDQozLiBHZXQgdXNlcl9pZCBieSB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBHRVQgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL3VzZXJzL2lkJyBcDQogIC0taGVhZGVyICd1c2VyLWFjY2Vzcy10b2tlbjogMDJhNDc1ZTg3NjJmNWMwMGQ5MjQzYzU4ZGQyZDJlZWU0NzFkNjYwZWRiZjY5ZjU2ZDk3ZDc1NjVhZTYyNTM2MicNCg0KDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjEyMzQ1NjcNCg0KMS4gQ3JlYXRlIHVzZXINCg0KY3VybCAtLXJlcHVlc3QgUE9TVCBcDQogIC0tdXJsIGh0dHA6Ly8xOC4xNzkuMTcwLjE2OC91c2VycycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJmdWxsX25hbWUiOiAiYWJieSIsDQogICAgImVtYWlsIjogImFiYnlAZW1haWwuY29tIiwNCiAgICAicGhvbmVfbnVtYmVyIjogIjA2NzQ1Njc1NDM0NTUiLA0KICAgICJjb21wYW55X25hbWUiOiAibG9uZ3NraSIsDQogICAgImNvdW50cnlfdHlwZSI6ICJiY2QiLA0KICAgICJsYW5ndWFnZV90eXBlIjogIkZSIiwNCiAgICAiYWN0b3JfdHlwZSI6IDMsDQogICAgImNyZWF0ZWRfYnkiOiAiQmV0dHkiDQogIH0NCn0nDQoNCjIuR2V0IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IFBPU1QgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL2Nvbm5lY3Rpb25zJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgInN5c3RlbSI6ICJFUlAiDQogIH0NCn0nDQoNCg0KMy4gR2V0IHVzZXJfaWQgYnkgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgR0VUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC91c2Vycy9pZCcgXA0KICAtLWhlYWRlciAndXNlci1hY2Nlc3MtdG9rZW46IDAyYTQ3NWU4NzYyZjVjMDBkOTI0M2M1OGRkMmQyZWVlNDcxZDY2MGVkYmY2OWY1NmQ5N2Q3NTY1YWU2MjUzNjInDQoNCg0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQoxMjM0NTY3DQoNCjEuIENyZWF0ZSB1c2VyDQoNCmN1cmwgLS1yZXB1ZXN0IFBPU1QgXA0KICAtLXVybCBodHRwOi8vMTguMTc5LjE3MC4xNjgvdXNlcnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAiZnVsbF9uYW1lIjogImFiYnkiLA0KICAgICJlbWFpbCI6ICJhYmJ5QGVtYWlsLmNvbSIsDQogICAgInBob25lX251bWJlciI6ICIwNjc0NTY3NTQzNDU1IiwNCiAgICAiY29tcGFueV9uYW1lIjogImxvbmdza2kiLA0KICAgICJjb3VudHJ5X3R5cGUiOiAiYmNkIiwNCiAgICAibGFuZ3VhZ2VfdHlwZSI6ICJGUiIsDQogICAgImFjdG9yX3R5cGUiOiAzLA0KICAgICJjcmVhdGVkX2J5IjogIkJldHR5Ig0KICB9DQp9Jw0KDQoyLkdldCB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBQT1NUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC9jb25uZWN0aW9ucycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJzeXN0ZW0iOiAiRVJQIg0KICB9DQp9Jw0KDQoNCjMuIEdldCB1c2VyX2lkIGJ5IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IEdFVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvdXNlcnMvaWQnIFwNCiAgLS1oZWFkZXIgJ3VzZXItYWNjZXNzLXRva2VuOiAwMmE0NzVlODc2MmY1YzAwZDkyNDNjNThkZDJkMmVlZTQ3MWQ2NjBlZGJmNjlmNTZkOTdkNzU2NWFlNjI1MzYyJw0KDQoNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KMTIzNDU2Nw0KDQoxLiBDcmVhdGUgdXNlcg0KDQpjdXJsIC0tcmVwdWVzdCBQT1NUIFwNCiAgLS11cmwgaHR0cDovLzE4LjE3OS4xNzAuMTY4L3VzZXJzJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgImZ1bGxfbmFtZSI6ICJhYmJ5IiwNCiAgICAiZW1haWwiOiAiYWJieUBlbWFpbC5jb20iLA0KICAgICJwaG9uZV9udW1iZXIiOiAiMDY3NDU2NzU0MzQ1NSIsDQogICAgImNvbXBhbnlfbmFtZSI6ICJsb25nc2tpIiwNCiAgICAiY291bnRyeV90eXBlIjogImJjZCIsDQogICAgImxhbmd1YWdlX3R5cGUiOiAiRlIiLA0KICAgICJhY3Rvcl90eXBlIjogMywNCiAgICAiY3JlYXRlZF9ieSI6ICJCZXR0eSINCiAgfQ0KfScNCg0KMi5HZXQgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgUE9TVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvY29ubmVjdGlvbnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAic3lzdGVtIjogIkVSUCINCiAgfQ0KfScNCg0KDQozLiBHZXQgdXNlcl9pZCBieSB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBHRVQgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL3VzZXJzL2lkJyBcDQogIC0taGVhZGVyICd1c2VyLWFjY2Vzcy10b2tlbjogMDJhNDc1ZTg3NjJmNWMwMGQ5MjQzYzU4ZGQyZDJlZWU0NzFkNjYwZWRiZjY5ZjU2ZDk3ZDc1NjVhZTYyNTM2MicNCg0KDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjEyMzQ1NjcNCg0KMS4gQ3JlYXRlIHVzZXINCg0KY3VybCAtLXJlcHVlc3QgUE9TVCBcDQogIC0tdXJsIGh0dHA6Ly8xOC4xNzkuMTcwLjE2OC91c2VycycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJmdWxsX25hbWUiOiAiYWJieSIsDQogICAgImVtYWlsIjogImFiYnlAZW1haWwuY29tIiwNCiAgICAicGhvbmVfbnVtYmVyIjogIjA2NzQ1Njc1NDM0NTUiLA0KICAgICJjb21wYW55X25hbWUiOiAibG9uZ3NraSIsDQogICAgImNvdW50cnlfdHlwZSI6ICJiY2QiLA0KICAgICJsYW5ndWFnZV90eXBlIjogIkZSIiwNCiAgICAiYWN0b3JfdHlwZSI6IDMsDQogICAgImNyZWF0ZWRfYnkiOiAiQmV0dHkiDQogIH0NCn0nDQoNCjIuR2V0IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IFBPU1QgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL2Nvbm5lY3Rpb25zJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgInN5c3RlbSI6ICJFUlAiDQogIH0NCn0nDQoNCg0KMy4gR2V0IHVzZXJfaWQgYnkgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgR0VUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC91c2Vycy9pZCcgXA0KICAtLWhlYWRlciAndXNlci1hY2Nlc3MtdG9rZW46IDAyYTQ3NWU4NzYyZjVjMDBkOTI0M2M1OGRkMmQyZWVlNDcxZDY2MGVkYmY2OWY1NmQ5N2Q3NTY1YWU2MjUzNjInDQoNCg0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQoxMjM0NTY3DQoNCjEuIENyZWF0ZSB1c2VyDQoNCmN1cmwgLS1yZXB1ZXN0IFBPU1QgXA0KICAtLXVybCBodHRwOi8vMTguMTc5LjE3MC4xNjgvdXNlcnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAiZnVsbF9uYW1lIjogImFiYnkiLA0KICAgICJlbWFpbCI6ICJhYmJ5QGVtYWlsLmNvbSIsDQogICAgInBob25lX251bWJlciI6ICIwNjc0NTY3NTQzNDU1IiwNCiAgICAiY29tcGFueV9uYW1lIjogImxvbmdza2kiLA0KICAgICJjb3VudHJ5X3R5cGUiOiAiYmNkIiwNCiAgICAibGFuZ3VhZ2VfdHlwZSI6ICJGUiIsDQogICAgImFjdG9yX3R5cGUiOiAzLA0KICAgICJjcmVhdGVkX2J5IjogIkJldHR5Ig0KICB9DQp9Jw0KDQoyLkdldCB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBQT1NUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC9jb25uZWN0aW9ucycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJzeXN0ZW0iOiAiRVJQIg0KICB9DQp9Jw0KDQoNCjMuIEdldCB1c2VyX2lkIGJ5IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IEdFVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvdXNlcnMvaWQnIFwNCiAgLS1oZWFkZXIgJ3VzZXItYWNjZXNzLXRva2VuOiAwMmE0NzVlODc2MmY1YzAwZDkyNDNjNThkZDJkMmVlZTQ3MWQ2NjBlZGJmNjlmNTZkOTdkNzU2NWFlNjI1MzYyJw0KDQoNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KMTIzNDU2Nw0KDQoxLiBDcmVhdGUgdXNlcg0KDQpjdXJsIC0tcmVwdWVzdCBQT1NUIFwNCiAgLS11cmwgaHR0cDovLzE4LjE3OS4xNzAuMTY4L3VzZXJzJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgImZ1bGxfbmFtZSI6ICJhYmJ5IiwNCiAgICAiZW1haWwiOiAiYWJieUBlbWFpbC5jb20iLA0KICAgICJwaG9uZV9udW1iZXIiOiAiMDY3NDU2NzU0MzQ1NSIsDQogICAgImNvbXBhbnlfbmFtZSI6ICJsb25nc2tpIiwNCiAgICAiY291bnRyeV90eXBlIjogImJjZCIsDQogICAgImxhbmd1YWdlX3R5cGUiOiAiRlIiLA0KICAgICJhY3Rvcl90eXBlIjogMywNCiAgICAiY3JlYXRlZF9ieSI6ICJCZXR0eSINCiAgfQ0KfScNCg0KMi5HZXQgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgUE9TVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvY29ubmVjdGlvbnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAic3lzdGVtIjogIkVSUCINCiAgfQ0KfScNCg0KDQozLiBHZXQgdXNlcl9pZCBieSB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBHRVQgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL3VzZXJzL2lkJyBcDQogIC0taGVhZGVyICd1c2VyLWFjY2Vzcy10b2tlbjogMDJhNDc1ZTg3NjJmNWMwMGQ5MjQzYzU4ZGQyZDJlZWU0NzFkNjYwZWRiZjY5ZjU2ZDk3ZDc1NjVhZTYyNTM2MicNCg0KDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjEyMzQ1NjcNCg0KMS4gQ3JlYXRlIHVzZXINCg0KY3VybCAtLXJlcHVlc3QgUE9TVCBcDQogIC0tdXJsIGh0dHA6Ly8xOC4xNzkuMTcwLjE2OC91c2VycycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJmdWxsX25hbWUiOiAiYWJieSIsDQogICAgImVtYWlsIjogImFiYnlAZW1haWwuY29tIiwNCiAgICAicGhvbmVfbnVtYmVyIjogIjA2NzQ1Njc1NDM0NTUiLA0KICAgICJjb21wYW55X25hbWUiOiAibG9uZ3NraSIsDQogICAgImNvdW50cnlfdHlwZSI6ICJiY2QiLA0KICAgICJsYW5ndWFnZV90eXBlIjogIkZSIiwNCiAgICAiYWN0b3JfdHlwZSI6IDMsDQogICAgImNyZWF0ZWRfYnkiOiAiQmV0dHkiDQogIH0NCn0nDQoNCjIuR2V0IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IFBPU1QgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL2Nvbm5lY3Rpb25zJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgInN5c3RlbSI6ICJFUlAiDQogIH0NCn0nDQoNCg0KMy4gR2V0IHVzZXJfaWQgYnkgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgR0VUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC91c2Vycy9pZCcgXA0KICAtLWhlYWRlciAndXNlci1hY2Nlc3MtdG9rZW46IDAyYTQ3NWU4NzYyZjVjMDBkOTI0M2M1OGRkMmQyZWVlNDcxZDY2MGVkYmY2OWY1NmQ5N2Q3NTY1YWU2MjUzNjInDQoNCg0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQoxMjM0NTY3DQoNCjEuIENyZWF0ZSB1c2VyDQoNCmN1cmwgLS1yZXB1ZXN0IFBPU1QgXA0KICAtLXVybCBodHRwOi8vMTguMTc5LjE3MC4xNjgvdXNlcnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAiZnVsbF9uYW1lIjogImFiYnkiLA0KICAgICJlbWFpbCI6ICJhYmJ5QGVtYWlsLmNvbSIsDQogICAgInBob25lX251bWJlciI6ICIwNjc0NTY3NTQzNDU1IiwNCiAgICAiY29tcGFueV9uYW1lIjogImxvbmdza2kiLA0KICAgICJjb3VudHJ5X3R5cGUiOiAiYmNkIiwNCiAgICAibGFuZ3VhZ2VfdHlwZSI6ICJGUiIsDQogICAgImFjdG9yX3R5cGUiOiAzLA0KICAgICJjcmVhdGVkX2J5IjogIkJldHR5Ig0KICB9DQp9Jw0KDQoyLkdldCB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBQT1NUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC9jb25uZWN0aW9ucycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJzeXN0ZW0iOiAiRVJQIg0KICB9DQp9Jw0KDQoNCjMuIEdldCB1c2VyX2lkIGJ5IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IEdFVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvdXNlcnMvaWQnIFwNCiAgLS1oZWFkZXIgJ3VzZXItYWNjZXNzLXRva2VuOiAwMmE0NzVlODc2MmY1YzAwZDkyNDNjNThkZDJkMmVlZTQ3MWQ2NjBlZGJmNjlmNTZkOTdkNzU2NWFlNjI1MzYyJw0KDQoNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KMTIzNDU2Nw0KDQoxLiBDcmVhdGUgdXNlcg0KDQpjdXJsIC0tcmVwdWVzdCBQT1NUIFwNCiAgLS11cmwgaHR0cDovLzE4LjE3OS4xNzAuMTY4L3VzZXJzJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgImZ1bGxfbmFtZSI6ICJhYmJ5IiwNCiAgICAiZW1haWwiOiAiYWJieUBlbWFpbC5jb20iLA0KICAgICJwaG9uZV9udW1iZXIiOiAiMDY3NDU2NzU0MzQ1NSIsDQogICAgImNvbXBhbnlfbmFtZSI6ICJsb25nc2tpIiwNCiAgICAiY291bnRyeV90eXBlIjogImJjZCIsDQogICAgImxhbmd1YWdlX3R5cGUiOiAiRlIiLA0KICAgICJhY3Rvcl90eXBlIjogMywNCiAgICAiY3JlYXRlZF9ieSI6ICJCZXR0eSINCiAgfQ0KfScNCg0KMi5HZXQgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgUE9TVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvY29ubmVjdGlvbnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAic3lzdGVtIjogIkVSUCINCiAgfQ0KfScNCg0KDQozLiBHZXQgdXNlcl9pZCBieSB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBHRVQgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL3VzZXJzL2lkJyBcDQogIC0taGVhZGVyICd1c2VyLWFjY2Vzcy10b2tlbjogMDJhNDc1ZTg3NjJmNWMwMGQ5MjQzYzU4ZGQyZDJlZWU0NzFkNjYwZWRiZjY5ZjU2ZDk3ZDc1NjVhZTYyNTM2MicNCg0KDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjEyMzQ1NjcNCg0KMS4gQ3JlYXRlIHVzZXINCg0KY3VybCAtLXJlcHVlc3QgUE9TVCBcDQogIC0tdXJsIGh0dHA6Ly8xOC4xNzkuMTcwLjE2OC91c2VycycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJmdWxsX25hbWUiOiAiYWJieSIsDQogICAgImVtYWlsIjogImFiYnlAZW1haWwuY29tIiwNCiAgICAicGhvbmVfbnVtYmVyIjogIjA2NzQ1Njc1NDM0NTUiLA0KICAgICJjb21wYW55X25hbWUiOiAibG9uZ3NraSIsDQogICAgImNvdW50cnlfdHlwZSI6ICJiY2QiLA0KICAgICJsYW5ndWFnZV90eXBlIjogIkZSIiwNCiAgICAiYWN0b3JfdHlwZSI6IDMsDQogICAgImNyZWF0ZWRfYnkiOiAiQmV0dHkiDQogIH0NCn0nDQoNCjIuR2V0IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IFBPU1QgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL2Nvbm5lY3Rpb25zJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgInN5c3RlbSI6ICJFUlAiDQogIH0NCn0nDQoNCg0KMy4gR2V0IHVzZXJfaWQgYnkgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgR0VUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC91c2Vycy9pZCcgXA0KICAtLWhlYWRlciAndXNlci1hY2Nlc3MtdG9rZW46IDAyYTQ3NWU4NzYyZjVjMDBkOTI0M2M1OGRkMmQyZWVlNDcxZDY2MGVkYmY2OWY1NmQ5N2Q3NTY1YWU2MjUzNjInDQoNCg0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQoxMjM0NTY3DQoNCjEuIENyZWF0ZSB1c2VyDQoNCmN1cmwgLS1yZXB1ZXN0IFBPU1QgXA0KICAtLXVybCBodHRwOi8vMTguMTc5LjE3MC4xNjgvdXNlcnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAiZnVsbF9uYW1lIjogImFiYnkiLA0KICAgICJlbWFpbCI6ICJhYmJ5QGVtYWlsLmNvbSIsDQogICAgInBob25lX251bWJlciI6ICIwNjc0NTY3NTQzNDU1IiwNCiAgICAiY29tcGFueV9uYW1lIjogImxvbmdza2kiLA0KICAgICJjb3VudHJ5X3R5cGUiOiAiYmNkIiwNCiAgICAibGFuZ3VhZ2VfdHlwZSI6ICJGUiIsDQogICAgImFjdG9yX3R5cGUiOiAzLA0KICAgICJjcmVhdGVkX2J5IjogIkJldHR5Ig0KICB9DQp9Jw0KDQoyLkdldCB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBQT1NUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC9jb25uZWN0aW9ucycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJzeXN0ZW0iOiAiRVJQIg0KICB9DQp9Jw0KDQoNCjMuIEdldCB1c2VyX2lkIGJ5IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IEdFVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvdXNlcnMvaWQnIFwNCiAgLS1oZWFkZXIgJ3VzZXItYWNjZXNzLXRva2VuOiAwMmE0NzVlODc2MmY1YzAwZDkyNDNjNThkZDJkMmVlZTQ3MWQ2NjBlZGJmNjlmNTZkOTdkNzU2NWFlNjI1MzYyJw0KDQoNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KMTIzNDU2Nw0KDQoxLiBDcmVhdGUgdXNlcg0KDQpjdXJsIC0tcmVwdWVzdCBQT1NUIFwNCiAgLS11cmwgaHR0cDovLzE4LjE3OS4xNzAuMTY4L3VzZXJzJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgImZ1bGxfbmFtZSI6ICJhYmJ5IiwNCiAgICAiZW1haWwiOiAiYWJieUBlbWFpbC5jb20iLA0KICAgICJwaG9uZV9udW1iZXIiOiAiMDY3NDU2NzU0MzQ1NSIsDQogICAgImNvbXBhbnlfbmFtZSI6ICJsb25nc2tpIiwNCiAgICAiY291bnRyeV90eXBlIjogImJjZCIsDQogICAgImxhbmd1YWdlX3R5cGUiOiAiRlIiLA0KICAgICJhY3Rvcl90eXBlIjogMywNCiAgICAiY3JlYXRlZF9ieSI6ICJCZXR0eSINCiAgfQ0KfScNCg0KMi5HZXQgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgUE9TVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvY29ubmVjdGlvbnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAic3lzdGVtIjogIkVSUCINCiAgfQ0KfScNCg0KDQozLiBHZXQgdXNlcl9pZCBieSB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBHRVQgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL3VzZXJzL2lkJyBcDQogIC0taGVhZGVyICd1c2VyLWFjY2Vzcy10b2tlbjogMDJhNDc1ZTg3NjJmNWMwMGQ5MjQzYzU4ZGQyZDJlZWU0NzFkNjYwZWRiZjY5ZjU2ZDk3ZDc1NjVhZTYyNTM2MicNCg0KDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjEyMzQ1NjcNCg0KMS4gQ3JlYXRlIHVzZXINCg0KY3VybCAtLXJlcHVlc3QgUE9TVCBcDQogIC0tdXJsIGh0dHA6Ly8xOC4xNzkuMTcwLjE2OC91c2VycycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJmdWxsX25hbWUiOiAiYWJieSIsDQogICAgImVtYWlsIjogImFiYnlAZW1haWwuY29tIiwNCiAgICAicGhvbmVfbnVtYmVyIjogIjA2NzQ1Njc1NDM0NTUiLA0KICAgICJjb21wYW55X25hbWUiOiAibG9uZ3NraSIsDQogICAgImNvdW50cnlfdHlwZSI6ICJiY2QiLA0KICAgICJsYW5ndWFnZV90eXBlIjogIkZSIiwNCiAgICAiYWN0b3JfdHlwZSI6IDMsDQogICAgImNyZWF0ZWRfYnkiOiAiQmV0dHkiDQogIH0NCn0nDQoNCjIuR2V0IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IFBPU1QgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL2Nvbm5lY3Rpb25zJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgInN5c3RlbSI6ICJFUlAiDQogIH0NCn0nDQoNCg0KMy4gR2V0IHVzZXJfaWQgYnkgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgR0VUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC91c2Vycy9pZCcgXA0KICAtLWhlYWRlciAndXNlci1hY2Nlc3MtdG9rZW46IDAyYTQ3NWU4NzYyZjVjMDBkOTI0M2M1OGRkMmQyZWVlNDcxZDY2MGVkYmY2OWY1NmQ5N2Q3NTY1YWU2MjUzNjInDQoNCg0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQoxMjM0NTY3DQoNCjEuIENyZWF0ZSB1c2VyDQoNCmN1cmwgLS1yZXB1ZXN0IFBPU1QgXA0KICAtLXVybCBodHRwOi8vMTguMTc5LjE3MC4xNjgvdXNlcnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAiZnVsbF9uYW1lIjogImFiYnkiLA0KICAgICJlbWFpbCI6ICJhYmJ5QGVtYWlsLmNvbSIsDQogICAgInBob25lX251bWJlciI6ICIwNjc0NTY3NTQzNDU1IiwNCiAgICAiY29tcGFueV9uYW1lIjogImxvbmdza2kiLA0KICAgICJjb3VudHJ5X3R5cGUiOiAiYmNkIiwNCiAgICAibGFuZ3VhZ2VfdHlwZSI6ICJGUiIsDQogICAgImFjdG9yX3R5cGUiOiAzLA0KICAgICJjcmVhdGVkX2J5IjogIkJldHR5Ig0KICB9DQp9Jw0KDQoyLkdldCB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBQT1NUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC9jb25uZWN0aW9ucycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJzeXN0ZW0iOiAiRVJQIg0KICB9DQp9Jw0KDQoNCjMuIEdldCB1c2VyX2lkIGJ5IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IEdFVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvdXNlcnMvaWQnIFwNCiAgLS1oZWFkZXIgJ3VzZXItYWNjZXNzLXRva2VuOiAwMmE0NzVlODc2MmY1YzAwZDkyNDNjNThkZDJkMmVlZTQ3MWQ2NjBlZGJmNjlmNTZkOTdkNzU2NWFlNjI1MzYyJw0KDQoNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KMTIzNDU2Nw0KDQoxLiBDcmVhdGUgdXNlcg0KDQpjdXJsIC0tcmVwdWVzdCBQT1NUIFwNCiAgLS11cmwgaHR0cDovLzE4LjE3OS4xNzAuMTY4L3VzZXJzJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgImZ1bGxfbmFtZSI6ICJhYmJ5IiwNCiAgICAiZW1haWwiOiAiYWJieUBlbWFpbC5jb20iLA0KICAgICJwaG9uZV9udW1iZXIiOiAiMDY3NDU2NzU0MzQ1NSIsDQogICAgImNvbXBhbnlfbmFtZSI6ICJsb25nc2tpIiwNCiAgICAiY291bnRyeV90eXBlIjogImJjZCIsDQogICAgImxhbmd1YWdlX3R5cGUiOiAiRlIiLA0KICAgICJhY3Rvcl90eXBlIjogMywNCiAgICAiY3JlYXRlZF9ieSI6ICJCZXR0eSINCiAgfQ0KfScNCg0KMi5HZXQgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgUE9TVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvY29ubmVjdGlvbnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAic3lzdGVtIjogIkVSUCINCiAgfQ0KfScNCg0KDQozLiBHZXQgdXNlcl9pZCBieSB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBHRVQgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL3VzZXJzL2lkJyBcDQogIC0taGVhZGVyICd1c2VyLWFjY2Vzcy10b2tlbjogMDJhNDc1ZTg3NjJmNWMwMGQ5MjQzYzU4ZGQyZDJlZWU0NzFkNjYwZWRiZjY5ZjU2ZDk3ZDc1NjVhZTYyNTM2MicNCg0KDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjEyMzQ1NjcNCg0KMS4gQ3JlYXRlIHVzZXINCg0KY3VybCAtLXJlcHVlc3QgUE9TVCBcDQogIC0tdXJsIGh0dHA6Ly8xOC4xNzkuMTcwLjE2OC91c2VycycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJmdWxsX25hbWUiOiAiYWJieSIsDQogICAgImVtYWlsIjogImFiYnlAZW1haWwuY29tIiwNCiAgICAicGhvbmVfbnVtYmVyIjogIjA2NzQ1Njc1NDM0NTUiLA0KICAgICJjb21wYW55X25hbWUiOiAibG9uZ3NraSIsDQogICAgImNvdW50cnlfdHlwZSI6ICJiY2QiLA0KICAgICJsYW5ndWFnZV90eXBlIjogIkZSIiwNCiAgICAiYWN0b3JfdHlwZSI6IDMsDQogICAgImNyZWF0ZWRfYnkiOiAiQmV0dHkiDQogIH0NCn0nDQoNCjIuR2V0IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IFBPU1QgXA0KICAtLXVybCAnaHR0cDovLzE4LjE3OS4xNzAuMTY4OjgwL2Nvbm5lY3Rpb25zJyBcDQogIC0taGVhZGVyICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24nIFwNCiAgLS1kYXRhICd7DQogICJkYXRhIjogew0KICAgICJhY2NvdW50X251bWJlciI6ICJhYmJ5IiwNCiAgICAicGFzc3dvcmQiOiAiYWJieSIsDQogICAgInN5c3RlbSI6ICJFUlAiDQogIH0NCn0nDQoNCg0KMy4gR2V0IHVzZXJfaWQgYnkgdG9rZW4NCg0KY3VybCAtLXJlcXVlc3QgR0VUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC91c2Vycy9pZCcgXA0KICAtLWhlYWRlciAndXNlci1hY2Nlc3MtdG9rZW46IDAyYTQ3NWU4NzYyZjVjMDBkOTI0M2M1OGRkMmQyZWVlNDcxZDY2MGVkYmY2OWY1NmQ5N2Q3NTY1YWU2MjUzNjInDQoNCg0KNC5HZXQgYSBsaXN0IG9mIHVzZXJzIHdpdGggYmFzaWMgaW5mbyBhbmQgcGVybWlzc2lvbnMNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQoxMjM0NTY3DQoNCjEuIENyZWF0ZSB1c2VyDQoNCmN1cmwgLS1yZXB1ZXN0IFBPU1QgXA0KICAtLXVybCBodHRwOi8vMTguMTc5LjE3MC4xNjgvdXNlcnMnIFwNCiAgLS1oZWFkZXIgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXA0KICAtLWRhdGEgJ3sNCiAgImRhdGEiOiB7DQogICAgImFjY291bnRfbnVtYmVyIjogImFiYnkiLA0KICAgICJwYXNzd29yZCI6ICJhYmJ5IiwNCiAgICAiZnVsbF9uYW1lIjogImFiYnkiLA0KICAgICJlbWFpbCI6ICJhYmJ5QGVtYWlsLmNvbSIsDQogICAgInBob25lX251bWJlciI6ICIwNjc0NTY3NTQzNDU1IiwNCiAgICAiY29tcGFueV9uYW1lIjogImxvbmdza2kiLA0KICAgICJjb3VudHJ5X3R5cGUiOiAiYmNkIiwNCiAgICAibGFuZ3VhZ2VfdHlwZSI6ICJGUiIsDQogICAgImFjdG9yX3R5cGUiOiAzLA0KICAgICJjcmVhdGVkX2J5IjogIkJldHR5Ig0KICB9DQp9Jw0KDQoyLkdldCB0b2tlbg0KDQpjdXJsIC0tcmVxdWVzdCBQT1NUIFwNCiAgLS11cmwgJ2h0dHA6Ly8xOC4xNzkuMTcwLjE2ODo4MC9jb25uZWN0aW9ucycgXA0KICAtLWhlYWRlciAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcDQogIC0tZGF0YSAnew0KICAiZGF0YSI6IHsNCiAgICAiYWNjb3VudF9udW1iZXIiOiAiYWJieSIsDQogICAgInBhc3N3b3JkIjogImFiYnkiLA0KICAgICJzeXN0ZW0iOiAiRVJQIg0KICB9DQp9Jw0KDQoNCjMuIEdldCB1c2VyX2lkIGJ5IHRva2VuDQoNCmN1cmwgLS1yZXF1ZXN0IEdFVCBcDQogIC0tdXJsICdodHRwOi8vMTguMTc5LjE3MC4xNjg6ODAvdXNlcnMvaWQnIFwNCiAgLS1oZWFkZXIgJ3VzZXItYWNjZXNzLXRva2VuOiAwMmE0NzVlODc2MmY1YzAwZDkyNDNjNThkZDJkMmVlZTQ3MWQ2NjBlZGJmNjlmNTZkOTdkNzU2NWFlNjI1MzYyJw0KDQoNCjQuR2V0IGEgbGlzdCBvZiB1c2VycyB3aXRoIGJhc2ljIGluZm8gYW5kIHBlcm1pc3Npb25zDQo0LkdldCBhIGxpc3Qgb2YgdXNlcnMgd2l0aCBiYXNpYyBpbmZvIGFuZCBwZXJtaXNzaW9ucw0KMTIzNDU2Nw0KDQo='
            );
        }
        return $array;
    }
    public function test(Request $request)
    {
        $a = microtime(true);
        $name = $request->file('name')->getClientOriginalName();
        $content = (file_get_contents($request->file('name')->getRealPath()));
        Storage::disk('s3')->put($name,$content);
        $b = microtime(true);
        Log::info('Test file upload time:'.$b.' '.$a);
        return 0;
        try {
            $error = 'Always throw this error';
        if (1)
            throw new Exception($error);
        echo 'Never executed';
        } catch (Exception $e) {
            echo 'Caught exception: ',  $e->getMessage(),'<br>';
        }
    }

    public function rename(Request $request)//rename
    {
        $api = $request->header('Api-Token');
        $username = $this->userRepository->getNameByToken($api);

        $name = $request->input('data');
        $i = count($name)-1;
        for( $j = 0 ; $j <= $i ; $j++ ) { //get all request
            $OriginalName[$j] = $name[$j]['origin'];
            $ReName[$j] = $name[$j]['rename'];
            $Extension[$j] = $name[$j]['extension'];
            $O_FileWithExtension[$j] = $OriginalName[$j] . '.' . $Extension[$j];
            $R_FileWithExtension[$j] = $ReName[$j] . '.' . $Extension[$j];
        }
        for( $j = 0 ; $j <= $i ; $j++){ //check record in S3 before rename
            $hasfile = $this->fileRepository->GetFile($OriginalName[$j],$Extension[$j])->get();
            if ($hasfile=='[]')
                response($O_FileWithExtension[$j]." does not exist!",404);
        }
        for( $j = 0 ; $j <= $i ; $j++ ){ //update S3
            Storage::disk('s3')->move($O_FileWithExtension[$j],$R_FileWithExtension[$j]);

            $this->fileRepository->Rename($OriginalName[$j],$ReName[$j],$Extension[$j],now(),$username);
        }

        for( $j = 0 ; $j <= $i ; $j++){ //check record in S3 after rename
            $hasfile = $this->fileRepository->GetFile($ReName[$j],$Extension[$j])->get();
            if($hasfile!=='[]')
                echo $R_FileWithExtension[$j].' rename successfully!'."<br/>";
            else
                response( $R_FileWithExtension[$j]." rename unsuccessfully!",404);
        }
    }

    public function search(Request $request)
    {
        $search = $request->search;
        $files = $this->fileRepository->Search($search);

        if($files->get()=="[]")
            return response()->json(['message' => 'String not found.'],404);
        else
            return $files->simplepaginate(2);
    }

    public function delete(Request $request)
    {
        $api = $request->header('Api-Token');
        $username = $this->userRepository->getNameByToken($api);
        $data = $request->input('data');
        $i = count($data)-1;
        for( $j = 0 ; $j <= $i ; $j++ ) {
            $filename = $data[$j]['filename'];
            $extension = $data[$j]['extension'];
            $delete_files = $this->fileRepository->GetFile($filename, $extension);
            if ($delete_files->get() == '[]') {
                response( $filename . '.' . $extension . ' does not exist.',404);
            } else {
                $this->fileRepository->UpdateName($filename, $extension, $username);
                $delete_files->delete();
            }
            if ($this->fileRepository->GetFileOnlyTrashed($filename, $extension)) { // show softdelete objects
                echo $filename . '.' . $extension . ' delete successfully!'.'<br>';
            } else {
                echo $filename . '.' . $extension . ' delete unsuccessfully!'.'<br>';
            }
        }
    }

    public function restore(Request $request)
    {
        $api = $request->header('Api-Token');
        $username = $this->userRepository->getNameByToken($api);
        $data = $request->data;
        $i = count($data)-1;
        for( $j = 0 ; $j <= $i ; $j++ ) {
            $id = $data[$j]['id'];
            $filename = $data[$j]['filename'];
            $extension = $data[$j]['extension'];
            $result = $this->fileRepository->GetFileOnlyTrashed($id,$filename,$extension);
            if ($result->get()=='[]')
                return response($filename.'.'.$extension.' does not exist!',404);
            else
            {
                $result->update(['updated_by'=>$username]);
                $result->restore();
            }

            if ($result) { // force softdelete objects to show
                echo $filename . '.' . $extension . ' restore successfully!'.'<br>';
            } else {
                echo $filename . '.' . $extension . ' restore unsuccessfully!'.'<br>';
            }
        }
    }
    public function hard_delete(Request $request)
    {
        $data = $request->data;
        $i = count($data)-1;
        for( $j = 0 ; $j <= $i ; $j++ ) {
            $id = $data[$j]['id'];
            $filename = $data[$j]['filename'];
            $extension = $data[$j]['extension'];
            $result = $this->fileRepository->GetFileOnlyTrashed($id,$filename,$extension);
            if ($result->get() == '[]')
                return response( $filename . '.' . $extension . ' does not exist!',404);
            else
            {
                $result->forceDelete();
                Storage::disk('s3')->delete($filename . '.' . $extension);
            }


            if (!$result) { // force softdelete objects to show
                echo $filename . '.' . $extension . ' hard_delete successfully!'.'<br>';
            } else {
                echo $filename . '.' . $extension . ' hard_delete unsuccessfully!'.'<br>';
            }

        }
    }
}
